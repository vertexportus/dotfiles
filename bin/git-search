#!/usr/bin/env bash

. "${BASH_SOURCE%/*}/utils/colors.sh"

function _ask_do_merge() {
    local current_branch=$(git branch | grep \* | cut -d ' ' -f2 | tr -d '\n')
    read -rp " ${ASK_QUESTION} ${CYAN}Confirm merge from ${PURPLE}'${1}'${CYAN} into ${PURPLE}'${current_branch}'${CYAN} [y/n]:${BREAK}" INSTALL
    if [[ ${INSTALL,,} =~ ^(y|yes|j|ja|s|si|sim|o|oui)$ ]]; then
        git merge $1
    else
        echo "${RED}NOT MERGED!${NC}"
    fi
}

function _parse_branch() {
    case $process in
        "clip") echo $1 | tr -d '\n' | xclip -selection c;;
        "checkout") git checkout $1;;
        "merge") _ask_do_merge $1;;
    esac;
}

r=""
process="clip"
while [[ "$#" -gt 0 ]]; do case $1 in
  -o|--origin) r="-r";;
  -c|--checkout) process="checkout";;
  -m|--merge) process="merge";;
  -*) echo "Unknown parameter passed: $1"; exit 1;;
  *) search_value=$1;;
esac; shift; done

branches=($(git branch ${r} | grep $search_value | tr -d '*' | tr -d ' '))
len=${#branches[@]}

if [ $len -eq 0 ]; then
    echo "no branch found"
elif [ $len -lt 2 ]; then
    echo $branches
    _parse_branch $branches
else
    for index in ${!branches[@]}; do
        echo ' ' $((index+1))')' "${branches[index]}"
    done
    read -n 1 -s choice
    choice=$((choice-1))
    echo ${branches[$choice]}
    _parse_branch ${branches[$choice]}
fi
